// Imports
import * as express from 'express';
import * as path from 'path';
import * as exphbs from 'express-handlebars';
import * as co from 'co';
import * as bodyParser from 'body-parser';

import { OAuth2Framework, Client } from './index';

const app = express();

// Configures middleware
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Configure view engine
app.engine('handlebars', exphbs({}));

app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'handlebars');

const framework = new OAuth2Framework({
    findClient: (client_id: string) => {
        return Promise.resolve(new Client(null, null, null, ['http://localhost:3000/callback']));
    },
    validateCredentials: (client_id: string, username: string, password: string) => {
        if (username.toLowerCase() === 'demo' && password === '123456') {
            return Promise.resolve(true);
        }else {
            return Promise.resolve(false);
        }
    }
});

/**
 * @api {get} /authorize Authorization Request
 * @apiName AuthorizationRequest
 * @apiGroup OAuth2
 *
 * @apiParam {String} response_type The authorization endpoint is used by the authorization code grant type and implicit grant type flows
 * @apiParam {String} client_id The client identifier issued to the client during the registration process
 * @apiParam {string} redirect_uri After completing its interaction with the resource owner, the authorization server directs the resource owner's user-agent back to the client
 * @apiParam {string} scope The scope of the access request
 * @apiParam {string} state An opaque value used by the client to maintain state between the request and callback
 *
 */
app.get('/authorize', (req, res) => {
    res.render('login', {
        name: 'Demo Application'
    });
});

app.post('/authorize', function (req, res) {
    co(function* () {
        const result: string = yield framework.authorizationRequest(req.query.response_type, req.query.client_id, req.query.redirect_uri, [req.query.scope], req.query.state, req.body.username, req.body.password);

        if (!result) {
            res.render('login', {
                name: 'Demo Application',
                message: 'Invalid login credentials'
            });
            return;
        }

        if (req.query.response_type === 'code') {
            res.redirect(`${req.query.redirect_uri}?code=${result}&state=${req.query.state}`);
        } else if (req.query.response_type === 'token') {
            res.redirect(`${req.query.redirect_uri}?access_token=${result}&state=${req.query.state}`);
        }
    }).catch((err: Error) => {
        res.send(err.message);
    });
});

/**
 * @api {post} /token Access Token Request
 * @apiName AccessTokenRequest
 * @apiGroup OAuth2
 *
 * @apiParam {String} grant_type Grant Type
 * @apiParam {String} client_id The client identifier issued to the client during the registration process
 * @apiParam {string} client_secret The client secret
 * @apiParam {string} redirect_uri After completing its interaction with the resource owner, the authorization server directs the resource owner's user-agent back to the client
 * @apiParam {string} scope The scope of the access request
 * @apiParam {string} code The authorization code generated by the authorization server
 * @apiParam {string} username The username
 * @apiParam {string} password The password
 */
app.post('/token', (req, res) => {
    co(function* () {
        const accessToken: string = yield framework.accessTokenRequest(req.body.grant_type, req.body.code, req.body.redirect_uri, req.body.client_id, req.body.client_secret, req.body.username, req.body.password, [req.body.scope]);

        res.json({
            access_token: accessToken
        });
    }).catch((err: Error) => {
        res.send(err.message);
    });
});

app.post('/validate', (req, res) => {
    co(function* () {

        const authorizationHeader: string = req.get('Authorization');

        if (!authorizationHeader || authorizationHeader.split(' ')[0].toLowerCase() !== 'bearer') {
            throw new Error('Invalid header');
        }

        const access_token = authorizationHeader.split(' ')[1];

        const valid: boolean = yield framework.validateAccessToken(access_token);

        res.json({
            valid: valid
        });
    }).catch((err: Error) => {
        res.send(err.message);
    });
});

app.listen(3000, () => {
    console.log('listening on port 3000');
});